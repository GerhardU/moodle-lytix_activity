{"version":3,"file":"activity.min.js","sources":["../src/activity.js"],"sourcesContent":["import Ajax from 'core/ajax';\nimport Templates from 'core/templates';\nimport Widget from 'lytix_helper/widget';\nimport PercentRounder from 'lytix_helper/percent_rounder';\nimport {makeLoggingFunction} from 'lytix_logs/logs';\n\nexport const init = (contextid, courseid, userid) => {\n    const dataPromise = Widget.getData('local_lytix_lytix_activity_logs_get', {contextid, courseid, userid})\n    .then(data => {\n        const\n            times = data.Times,\n            length = times.length;\n        for (let i = 0; i < length; ++i) {\n            if (times[i].Me > 0 || times[i].Others > 0) {\n                return data;\n            }\n        }\n        throw new Widget.NoDataError();\n    });\n\n    const stringPromise = Widget.getStrings({\n        lytix_activity: { // eslint-disable-line camelcase\n            differing: {\n                Navigation: 'core',\n                Quiz: 'quiz',\n                Video: 'video',\n                Grade: 'grade',\n                Forum: 'forum',\n                Resource: 'resource',\n                Submission: 'submission',\n                noData: 'nodata',\n            },\n        },\n    });\n\n    const\n        widget = document.getElementById('activity'),\n        log = makeLoggingFunction(userid, courseid, contextid, 'activity');\n\n    Promise.all([stringPromise, dataPromise]).then(values => {\n        const\n            strings = values[0],\n            data = values[1],\n            times = data.Times,\n            length = times.length,\n            rounder = new PercentRounder();\n\n        const generateChartContext = target => {\n            const context = [];\n            for (let i = 0; i < length; ++i) {\n                const\n                    entry = times[i],\n                    time = entry[target];\n                if (time <= 0) {\n                    continue;\n                }\n                context.push({\n                    activity: entry.Type.toLowerCase(),\n                    label: strings[entry.Type],\n                    percent: rounder.round(time * 100),\n                });\n            }\n            rounder.reset();\n\n            // We have to wrap this with an object because the template needs a way to narrow down the context.\n            // I realise that this explanation sound confusing, check out activity.mustache, that might help.\n            return context.length > 0 ? {data: context} : false;\n        };\n        return Templates.render('lytix_activity/activity', {\n            me: generateChartContext('Me'),\n            others: generateChartContext('Others'),\n            showOthers: data.ShowOthers,\n        });\n    })\n    .then(html => {\n        widget.querySelector('.content').innerHTML = html;\n\n        // Set up controls for toggling others.\n        const barChartOthers = widget.querySelector('.others');\n        document.getElementById('show-others').addEventListener('change', e => {\n            const checked = e.target.checked;\n            Ajax.call([{\n                methodname: 'local_lytix_lytix_activity_toggle_others',\n                args: {userid, courseid, contextid, showothers: checked},\n            }]);\n            if (checked) {\n                barChartOthers.classList.remove('d-none');\n                log('SHOW', 'OTHERS');\n            } else {\n                barChartOthers.classList.add('d-none');\n                log('HIDE', 'OTHERS');\n            }\n        });\n        return;\n    })\n    .finally(() => {\n        widget.classList.remove('loading');\n    })\n    .catch(error => Widget.handleError(error, 'activity'));\n};\n"],"names":["contextid","courseid","userid","dataPromise","Widget","getData","then","data","times","Times","length","i","Me","Others","NoDataError","stringPromise","getStrings","lytix_activity","differing","Navigation","Quiz","Video","Grade","Forum","Resource","Submission","noData","widget","document","getElementById","log","Promise","all","values","strings","rounder","PercentRounder","generateChartContext","target","context","entry","time","push","activity","Type","toLowerCase","label","percent","round","reset","Templates","render","me","others","showOthers","ShowOthers","html","querySelector","innerHTML","barChartOthers","addEventListener","e","checked","call","methodname","args","showothers","classList","remove","add","finally","catch","error","handleError"],"mappings":"sjBAMoB,CAACA,UAAWC,SAAUC,gBAChCC,YAAcC,gBAAOC,QAAQ,sCAAuC,CAACL,UAAAA,UAAWC,SAAAA,SAAUC,OAAAA,SAC/FI,MAAKC,aAEEC,MAAQD,KAAKE,MACbC,OAASF,MAAME,WACd,IAAIC,EAAI,EAAGA,EAAID,SAAUC,KACtBH,MAAMG,GAAGC,GAAK,GAAKJ,MAAMG,GAAGE,OAAS,SAC9BN,WAGT,IAAIH,gBAAOU,eAGfC,cAAgBX,gBAAOY,WAAW,CACpCC,eAAgB,CACZC,UAAW,CACPC,WAAY,OACZC,KAAM,OACNC,MAAO,QACPC,MAAO,QACPC,MAAO,QACPC,SAAU,WACVC,WAAY,aACZC,OAAQ,aAMhBC,OAASC,SAASC,eAAe,YACjCC,KAAM,6BAAoB5B,OAAQD,SAAUD,UAAW,YAE3D+B,QAAQC,IAAI,CAACjB,cAAeZ,cAAcG,MAAK2B,eAEvCC,QAAUD,OAAO,GACjB1B,KAAO0B,OAAO,GACdzB,MAAQD,KAAKE,MACbC,OAASF,MAAME,OACfyB,QAAU,IAAIC,yBAEZC,qBAAuBC,eACnBC,QAAU,OACX,IAAI5B,EAAI,EAAGA,EAAID,SAAUC,EAAG,OAEzB6B,MAAQhC,MAAMG,GACd8B,KAAOD,MAAMF,QACbG,MAAQ,GAGZF,QAAQG,KAAK,CACTC,SAAUH,MAAMI,KAAKC,cACrBC,MAAOZ,QAAQM,MAAMI,MACrBG,QAASZ,QAAQa,MAAa,IAAPP,eAG/BN,QAAQc,QAIDV,QAAQ7B,OAAS,GAAI,CAACH,KAAMgC,iBAEhCW,mBAAUC,OAAO,0BAA2B,CAC/CC,GAAIf,qBAAqB,MACzBgB,OAAQhB,qBAAqB,UAC7BiB,WAAY/C,KAAKgD,gBAGxBjD,MAAKkD,OACF7B,OAAO8B,cAAc,YAAYC,UAAYF,WAGvCG,eAAiBhC,OAAO8B,cAAc,WAC5C7B,SAASC,eAAe,eAAe+B,iBAAiB,UAAUC,UACxDC,QAAUD,EAAEvB,OAAOwB,sBACpBC,KAAK,CAAC,CACPC,WAAY,2CACZC,KAAM,CAAC/D,OAAAA,OAAQD,SAAAA,SAAUD,UAAAA,UAAWkE,WAAYJ,YAEhDA,SACAH,eAAeQ,UAAUC,OAAO,UAChCtC,IAAI,OAAQ,YAEZ6B,eAAeQ,UAAUE,IAAI,UAC7BvC,IAAI,OAAQ,iBAKvBwC,SAAQ,KACL3C,OAAOwC,UAAUC,OAAO,cAE3BG,OAAMC,OAASpE,gBAAOqE,YAAYD,MAAO"}